### A Pluto.jl notebook ###
# v0.19.27

using Markdown
using InteractiveUtils

# ‚ïî‚ïê‚ï° 5b226140-525d-11ee-2e60-55f9f82f899e
md"""
# Parte 3 - Estruturas de dados I
"""

# ‚ïî‚ïê‚ï° 47fbe810-d30b-4f6a-93d1-2856fed594ca
md"""
Nesta se√ß√£o vamos estudar alguns tipos de estruturas de dados. Essas formas *compostas* s√£o constru√≠das sobre elementos que j√° vimos mas podem tamb√©m ir al√©m destes. Abordaremos apenas as caracter√≠sticas b√°sicas de cada uma das estruturas apresentadas e os casos de aplica√ß√£o se tornar√£o evidentes. Os diversos m√©todos comuns √† essas cole√ß√µes √© descrito [nesta p√°gina](https://docs.julialang.org/en/v1/base/collections/).
"""

# ‚ïî‚ïê‚ï° 91d42cd2-1a69-4fbc-9edb-d4d607371c60
md"""
## *Tuples*

Uma *tuple* √© constitu√≠da de uma sequ√™ncia de elementos, que podem ser de tipos diferentes, declarada entre par√™ntesis. A caracter√≠stica de base de uma *tuple* √© sua imutabilidade: uma vez declarada, seus elementos n√£o podem ser alterados.

!!! note "J√° vimos isso antes"

    Voltando a se√ß√£o aonde realizamos a convers√£o expl√≠cita de tipos acima, voc√™ pode verificar que na realidade j√° utilizamos uma tuple de n√∫meros indicando as intensidades RGB de uma cor.

Declaremos uma sequ√™ncia fixa de linguagens de programa√ß√£o dadas por seus nomes como `Strings`:
"""

# ‚ïî‚ïê‚ï° 692e4a6b-ee30-4ee7-a5ab-1f4ed5271e5a
languages = ("Julia", "Python", "Octave")

# ‚ïî‚ïê‚ï° c750be52-e855-4190-a766-b1c518577965
md"""
Inspecionando o tipo desta vari√°vel aprendemos mais uma caracter√≠stica importante inerente a defini√ß√£o de `Tuple` feita acima quanto ao seu car√°ter imut√°vel: o tipo de uma `Tuple` inclui individualmente o tipo de cada um de seus elementos. Dito de outra maneira, uma sequ√™ncia composta de um n√∫mero definido de objetos de dados tipos caracteriza por ela mesmo um novo tipo de dados.
"""

# ‚ïî‚ïê‚ï° 6f88eee0-a1a1-471f-8b28-9e197ae04499
typeof(languages)

# ‚ïî‚ïê‚ï° 6a42cbf3-3e1f-40f9-aefe-c4688ec7c0ec
md"""
Os elementos de uma `Tuple` podem ser acessados por seus √≠ndices.

!!! warning "Indices em Julia"

    √â o momento de mencionar que em Julia a indexa√ß√£o inicia com `1`.
"""

# ‚ïî‚ïê‚ï° 29698a56-3627-46a2-9c5c-029b2f92b606
@show languages[1]

# ‚ïî‚ïê‚ï° 31b10f62-4e4a-4ab9-a81d-de7d0d9b756f
md"""
Vamos tentar modificar o segundo elemento da `Tuple`.

!!! tip "Sintaxe de controle de erros"

    Ainda √© cedo para entrar nos detalhes, mas aproveite o bloco abaixo para ter um primeiro contato com a gest√£o de erros em Julia.
"""

# ‚ïî‚ïê‚ï° e22b0b9e-813c-4528-aa09-d394c7d37da5
try
    languages[2] = "C++"
catch err
    println("Erro: $(err)")
end

# ‚ïî‚ïê‚ï° c3658afa-1a9b-4cd2-951c-234a6b37c8fe
md"""
Existem certas subtilidades que voc√™ precisa saber sobre a imutabilidade. Observe o exemplo abaixo, aonde declaramos duas vari√°veis que s√£o utilizadas para construir uma `Tuple` e ent√£o modificamos uma das vari√°veis: a `Tuple` continua com os valores originais do momento da sua constru√ß√£o.
"""

# ‚ïî‚ïê‚ï° 0c29046a-2f4a-43b0-a670-2a2cfca22398
begin
    var1 = 1
    var2 = 2

    test_tuple1 = (var1, var2)

    var1 = 5
    test_tuple1
end

# ‚ïî‚ïê‚ï° 245b49a4-c880-4b6e-bc08-99d8494264d6
md"""
!!! danger "Isso nem sempre √© verdade!"

    Se o elemento compondo a `Tuple` for de um tipo mut√°vel, como √© o caso de `Array`'s, como veremos no que se segue, os elementos desta vari√°vel podem ser modificados e impactam a `Tuple` diretamente. Isso se d√° porque neste caso a `Tuple` conserva a refer√™ncia ao objeto em quest√£o, e n√£o uma c√≥pia dos valores, como √© o caso para tipos de base.
"""

# ‚ïî‚ïê‚ï° bfc36ed8-9b17-4fbd-bea2-97141c2e83b8
begin
    var3 = [1, 2]

    test_tuple2 = (var1, var3)

    var3[1] = 999
    test_tuple2
end

# ‚ïî‚ïê‚ï° ce0750fd-ff28-4c77-9cd5-e99a6217d1ae
md"""
## *Named tuples*

Esta extens√£o √† `Tuples` adiciona a possibilidade de acesso aos componentes por um *nome* no lugar de um simples √≠ndice -- que continua funcional como veremos abaixo. Esse tipo de estrutura √© bastante √∫til quando necessitamos criar abstra√ß√µes de coisas bastante simples para as quais a cria√ß√£o de um novo tipo n√£o se justifica. Discutiremos mais tarde quando vamos estudar a cria√ß√£o de *novos tipos*.
"""

# ‚ïî‚ïê‚ï° 55737e3e-d1df-4dc5-99bb-4ddc7c33145a
named_languages = (julia = "Julia", python = "Python")

# ‚ïî‚ïê‚ï° 4b1aa7ab-dcdd-4f31-9acb-874293628981
md"""
Observe o fato de que agora os nomes utilizados no √≠ndex fazem parte do tipo.
"""

# ‚ïî‚ïê‚ï° 23b805d5-8380-42ec-8750-89175477ac19
typeof(named_languages)

# ‚ïî‚ïê‚ï° 0ff040a3-86cc-4ec7-bcc3-204efdc3bc55
md"""
Abaixo verificamos que al√©m do acesso por nomes, `NamedTuples` tamb√©m respeitam a ordem de declara√ß√£o dos elementos: `:julia` √© o primeiro √≠ndice. A sintaxe de acesso aos elementos neste caso √© com a nota√ß√£o t√≠pica utilizando um ponto, comum a diversas linguages de programa√ß√£o.
"""

# ‚ïî‚ïê‚ï° f1e6c01f-3b0b-4786-aad1-e2a0315bc989
named_languages[1] == named_languages.julia

# ‚ïî‚ïê‚ï° 8df29d98-4128-4b30-af1b-6a8e4bd1a876
md"""
## Dicion√°rios

Objetos do tipo `Dict` possuem a similaridade com `NamedTuples` em que seus elementos podem ser acessados por nome. No entanto a sintaxe √© diferente e os valores desta estrutura s√£o mut√°veis.
"""

# ‚ïî‚ïê‚ï° d5cf68d2-9d47-4458-b44c-29629840abba
organs = Dict("brain" => "üß†", "heart" => "‚ù§")

# ‚ïî‚ïê‚ï° d8e2af34-2840-4aae-921f-bc2535ff416c
md"""
O acesso a elementos se faz com colchetes contendo o √≠ndex como se segue:
"""

# ‚ïî‚ïê‚ï° c253e7a0-878f-48ce-87e2-9c7d3267b960
organs["brain"]

# ‚ïî‚ïê‚ï° ab4506c1-745d-408c-947a-c688935249fc
md"""
E como dissemos, os elementos s√£o mut√°veis: vamos atribuir um burrito ao c√©rebro.
"""

# ‚ïî‚ïê‚ï° 6ed3740d-ca3b-4714-9dc7-9e08948a88b7
organs["brain"] = "üåØ"

# ‚ïî‚ïê‚ï° 8b799f5c-9ce7-4db8-b991-f49d885335d2
md"""
N√£o s√≥ os elementos, mas o dicion√°rio como um todo, pode ser alterado. Para adicionar novos elementos simplesmente *acessamos* a palavra-chave e atribu√≠mos um valor:
"""

# ‚ïî‚ïê‚ï° f6e40b5b-a4e9-4a29-bf5d-81dbee87b18b
organs["eyes"] = "üëÄ"

# ‚ïî‚ïê‚ï° 039ea029-bcc5-4b99-83f8-de9d205c8a76
md"""
Internamente para evitar nova aloca√ß√£o de mem√≥ria a cada tentativa de se adicionar um novo elemento, um dicion√°rio realiza a aloca√ß√£o de `slots` que s√£o renovados cada vez que sua capacidade √© ultrapassada. Observe que a lista retornada abaixo √© composta majoritariamente de `0x00`, que √© o endere√ßo de mem√≥ria nulo, enquanto 3 elementos indicam um valor n√£o-nulo, correspondendo aos elementos j√° adicionados ao dicion√°rio. Disto vemos que adicionalmente um dicion√°rio n√£o preserva necessariamente uma sequ√™ncia ordenada. Esses detalhes ultrapassam o presente escopo mas v√£o abrindo as portas para assuntos mais complexos. 
"""

# ‚ïî‚ïê‚ï° 0ef39afb-9727-4d0e-a803-aaa7be1c0478
organs.slots

# ‚ïî‚ïê‚ï° 4e4c5a86-4081-439f-bbb2-ff2d7ea677ee
organs

# ‚ïî‚ïê‚ï° 6affc4cc-0bbf-47cf-8b11-53d8b9f589ba
md"""
Para remover elementos utilizamos a fun√ß√£o `pop!`. Por conven√ß√£o em Julia, fun√ß√µes que terminam por um ponto de exclama√ß√£o modificam os argumentos que s√£o passados. No caso de `pop!` o dicion√°rio √© modificado e o valor de retorno √© aquele do elemento removido.
"""

# ‚ïî‚ïê‚ï° c82d7896-1b33-48b7-802e-3e257adc4410
pop!(organs, "brain")

# ‚ïî‚ïê‚ï° be1b0abb-124b-40a0-9568-97d67a4593fd
md"""
A tentativa de remover um elemento inexistente obviamente conduz √† um erro:
"""

# ‚ïî‚ïê‚ï° 883c21f5-7e99-4807-bd9d-108e3073e025
try
    pop!(organs, "leg")
catch err
    println("Erro: $(err)")
end

# ‚ïî‚ïê‚ï° 930089df-128e-4993-902a-5611b5a6884b
organs

# ‚ïî‚ïê‚ï° e5fefe37-d51d-4dc4-94b2-00a1ade5d7db
md"""
Para evitar essa possibilidade podemos usar a fun√ß√£o `haskey()`.
"""

# ‚ïî‚ïê‚ï° c3108d00-657d-4711-8474-e8b22e4c9eeb
haskey(organs, "liver")

# ‚ïî‚ïê‚ï° 5259ed97-19fc-4ee4-b568-ca9ed355eed8
md"""
Uma √∫ltima coisa a notar √© que *praticamente* qualquer tipo b√°sico pode ser empregado como a chave de um dicion√°rio em Julia. Veja o exemplo √† seguir:
"""

# ‚ïî‚ïê‚ï° 94a1caa0-153b-4208-a4f4-32bc2eaee2c9
music = Dict(:violin => "üéª", 1 => 2)

# ‚ïî‚ïê‚ï° 2fc1eea1-661f-4b01-8890-d9a9a3157f6f
md"""
Como as chaves s√£o de tipos diferentes (um `Symbol` e um `Int64`), assim como os valores (uma `String` e um `Int64`), a fun√ß√£o `typeof()` nos retorna tipos `Any`.
"""

# ‚ïî‚ïê‚ï° 10fb89d7-1401-4962-b740-a7ae858f4604
typeof(music)

# ‚ïî‚ïê‚ï° 058aee92-02b3-4626-b4af-88d80b99f4f1
md"""
Ainda nos restam alguns detalhes e tipos de dados, mas o tutorial come√ßa a ficar longo... e n√£o queremos te perder por aqui!

Isso √© tudo para esta sess√£o de estudo! At√© a pr√≥xima!
"""

# ‚ïî‚ïê‚ï° b9af06b7-88c7-40fe-8c0d-f2510c5ec36d
begin
    import PlutoUI
    PlutoUI.TableOfContents(title = "T√≥picos")
end

# ‚ïî‚ïê‚ï° 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
PlutoUI = "7f904dfe-b85e-4ff6-b463-dae2292396a8"

[compat]
PlutoUI = "~0.7.52"
"""

# ‚ïî‚ïê‚ï° 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.9.0"
manifest_format = "2.0"
project_hash = "f5c06f335ceddc089c816627725c7f55bb23b077"

[[deps.AbstractPlutoDingetjes]]
deps = ["Pkg"]
git-tree-sha1 = "91bd53c39b9cbfb5ef4b015e8b582d344532bd0a"
uuid = "6e696c72-6542-2067-7265-42206c756150"
version = "1.2.0"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"
version = "1.1.1"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[deps.ColorTypes]]
deps = ["FixedPointNumbers", "Random"]
git-tree-sha1 = "eb7f0f8307f71fac7c606984ea5fb2817275d6e4"
uuid = "3da002f7-5984-5a60-b8a6-cbb66c0b333f"
version = "0.11.4"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.0.2+0"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"
version = "1.6.0"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"

[[deps.FixedPointNumbers]]
deps = ["Statistics"]
git-tree-sha1 = "335bfdceacc84c5cdf16aadc768aa5ddfc5383cc"
uuid = "53c48c17-4a7d-5ca2-90c5-79b7896eea93"
version = "0.8.4"

[[deps.Hyperscript]]
deps = ["Test"]
git-tree-sha1 = "8d511d5b81240fc8e6802386302675bdf47737b9"
uuid = "47d2ed2b-36de-50cf-bf87-49c2cf4b8b91"
version = "0.0.4"

[[deps.HypertextLiteral]]
deps = ["Tricks"]
git-tree-sha1 = "c47c5fa4c5308f27ccaac35504858d8914e102f9"
uuid = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
version = "0.9.4"

[[deps.IOCapture]]
deps = ["Logging", "Random"]
git-tree-sha1 = "d75853a0bdbfb1ac815478bacd89cd27b550ace6"
uuid = "b5f81e59-6552-4d32-b1f0-c071b021bf89"
version = "0.2.3"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"
version = "0.6.3"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"
version = "7.84.0+0"

[[deps.LibGit2]]
deps = ["Base64", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"
version = "1.10.2+0"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.MIMEs]]
git-tree-sha1 = "65f28ad4b594aebe22157d6fac869786a255b7eb"
uuid = "6c6e2e6c-3030-632d-7369-2d6c69616d65"
version = "0.1.4"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"
version = "2.28.2+0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"
version = "2022.10.11"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"
version = "1.2.0"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.21+4"

[[deps.Parsers]]
deps = ["Dates", "PrecompileTools", "UUIDs"]
git-tree-sha1 = "716e24b21538abc91f6205fd1d8363f39b442851"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.7.2"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "FileWatching", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
version = "1.9.0"

[[deps.PlutoUI]]
deps = ["AbstractPlutoDingetjes", "Base64", "ColorTypes", "Dates", "FixedPointNumbers", "Hyperscript", "HypertextLiteral", "IOCapture", "InteractiveUtils", "JSON", "Logging", "MIMEs", "Markdown", "Random", "Reexport", "URIs", "UUIDs"]
git-tree-sha1 = "e47cd150dbe0443c3a3651bc5b9cbd5576ab75b7"
uuid = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
version = "0.7.52"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "03b4c25b43cb84cee5c90aa9b5ea0a78fd848d2f"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.2.0"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "7eb1686b4f04b82f96ed7a4ea5890a4f0c7a09f1"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.4.0"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.Reexport]]
git-tree-sha1 = "45e428421666073eab6f2da5c9d310d99bb12f9b"
uuid = "189a3867-3050-52da-a836-e630ba90ab69"
version = "1.2.2"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[deps.SparseArrays]]
deps = ["Libdl", "LinearAlgebra", "Random", "Serialization", "SuiteSparse_jll"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"
version = "1.9.0"

[[deps.SuiteSparse_jll]]
deps = ["Artifacts", "Libdl", "Pkg", "libblastrampoline_jll"]
uuid = "bea87d4a-7f5b-5778-9afe-8cc45184846c"
version = "5.10.1+6"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"
version = "1.10.0"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

[[deps.Tricks]]
git-tree-sha1 = "aadb748be58b492045b4f56166b5188aa63ce549"
uuid = "410a4b4d-49e4-4fbc-ab6d-cb71b17b3775"
version = "0.1.7"

[[deps.URIs]]
git-tree-sha1 = "b7a5e99f24892b6824a954199a45e9ffcc1c70f0"
uuid = "5c2747f8-b7ea-4ff2-ba2e-563bfd36b1d4"
version = "1.5.0"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"
version = "1.2.13+0"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.7.0+0"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"
version = "1.48.0+0"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
version = "17.4.0+0"
"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ5b226140-525d-11ee-2e60-55f9f82f899e
# ‚ïü‚îÄ47fbe810-d30b-4f6a-93d1-2856fed594ca
# ‚ïü‚îÄ91d42cd2-1a69-4fbc-9edb-d4d607371c60
# ‚ï†‚ïê692e4a6b-ee30-4ee7-a5ab-1f4ed5271e5a
# ‚ïü‚îÄc750be52-e855-4190-a766-b1c518577965
# ‚ï†‚ïê6f88eee0-a1a1-471f-8b28-9e197ae04499
# ‚ïü‚îÄ6a42cbf3-3e1f-40f9-aefe-c4688ec7c0ec
# ‚ï†‚ïê29698a56-3627-46a2-9c5c-029b2f92b606
# ‚ïü‚îÄ31b10f62-4e4a-4ab9-a81d-de7d0d9b756f
# ‚ï†‚ïêe22b0b9e-813c-4528-aa09-d394c7d37da5
# ‚ïü‚îÄc3658afa-1a9b-4cd2-951c-234a6b37c8fe
# ‚ï†‚ïê0c29046a-2f4a-43b0-a670-2a2cfca22398
# ‚ïü‚îÄ245b49a4-c880-4b6e-bc08-99d8494264d6
# ‚ï†‚ïêbfc36ed8-9b17-4fbd-bea2-97141c2e83b8
# ‚ïü‚îÄce0750fd-ff28-4c77-9cd5-e99a6217d1ae
# ‚ï†‚ïê55737e3e-d1df-4dc5-99bb-4ddc7c33145a
# ‚ïü‚îÄ4b1aa7ab-dcdd-4f31-9acb-874293628981
# ‚ï†‚ïê23b805d5-8380-42ec-8750-89175477ac19
# ‚ïü‚îÄ0ff040a3-86cc-4ec7-bcc3-204efdc3bc55
# ‚ï†‚ïêf1e6c01f-3b0b-4786-aad1-e2a0315bc989
# ‚ïü‚îÄ8df29d98-4128-4b30-af1b-6a8e4bd1a876
# ‚ï†‚ïêd5cf68d2-9d47-4458-b44c-29629840abba
# ‚ïü‚îÄd8e2af34-2840-4aae-921f-bc2535ff416c
# ‚ï†‚ïêc253e7a0-878f-48ce-87e2-9c7d3267b960
# ‚ïü‚îÄab4506c1-745d-408c-947a-c688935249fc
# ‚ï†‚ïê6ed3740d-ca3b-4714-9dc7-9e08948a88b7
# ‚ïü‚îÄ8b799f5c-9ce7-4db8-b991-f49d885335d2
# ‚ï†‚ïêf6e40b5b-a4e9-4a29-bf5d-81dbee87b18b
# ‚ïü‚îÄ039ea029-bcc5-4b99-83f8-de9d205c8a76
# ‚ï†‚ïê0ef39afb-9727-4d0e-a803-aaa7be1c0478
# ‚ï†‚ïê4e4c5a86-4081-439f-bbb2-ff2d7ea677ee
# ‚ïü‚îÄ6affc4cc-0bbf-47cf-8b11-53d8b9f589ba
# ‚ï†‚ïêc82d7896-1b33-48b7-802e-3e257adc4410
# ‚ïü‚îÄbe1b0abb-124b-40a0-9568-97d67a4593fd
# ‚ï†‚ïê883c21f5-7e99-4807-bd9d-108e3073e025
# ‚ï†‚ïê930089df-128e-4993-902a-5611b5a6884b
# ‚ïü‚îÄe5fefe37-d51d-4dc4-94b2-00a1ade5d7db
# ‚ï†‚ïêc3108d00-657d-4711-8474-e8b22e4c9eeb
# ‚ïü‚îÄ5259ed97-19fc-4ee4-b568-ca9ed355eed8
# ‚ï†‚ïê94a1caa0-153b-4208-a4f4-32bc2eaee2c9
# ‚ïü‚îÄ2fc1eea1-661f-4b01-8890-d9a9a3157f6f
# ‚ï†‚ïê10fb89d7-1401-4962-b740-a7ae858f4604
# ‚ïü‚îÄ058aee92-02b3-4626-b4af-88d80b99f4f1
# ‚ïü‚îÄb9af06b7-88c7-40fe-8c0d-f2510c5ec36d
# ‚ïü‚îÄ00000000-0000-0000-0000-000000000001
# ‚ïü‚îÄ00000000-0000-0000-0000-000000000002
